
server:
  port: 8080
  shutdown: graceful
  error:
    whitelabel:
      enabled: false

spring:
  main:
    banner-mode: 'off'
  profiles:
    active: default
  flyway:
    enabled: false
  jpa:
    hibernate:
      ddl-auto: update
  kafka:
    bootstrap-servers: ${kafka.brokers}
    security:
      protocol: ssl
    ssl:
      trust-store-location: file:${kafka.truststore.path}
      trust-store-type: JKS
      trust-store-password: ${kafka.credstore.password}
      key-store-location: file:${kafka.keystore.path}
      key-store-type: PKCS12
      key-store-password: ${kafka.credstore.password}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: no.nav.tsm.mottak.sykmelding.kafka.util.SykmeldingRecordSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: no.nav.tsm.syk_inn_api.model.sykmelding.kafka.util.SykmeldingDeserializer
      properties:
        spring.json.trusted.packages: "*"
  datasource:
    url: "jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_DATABASE}?reWriteBatchedInserts=true"
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      minimum-idle: 1
      maximum-pool-size: 5
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${AZURE_OPENID_CONFIG_ISSUER}
          jwk-set-uri: ${AZURE_OPENID_CONFIG_JWKS_URI}
          audiences: ${AZURE_APP_CLIENT_ID}
      client:
        registration:
          syfohelsenettproxy-m2m:
            authorization-grant-type: client_credentials
            client-authentication-method: client_secret_basic
            client-id: ${azure.app.client.id}
            client-secret: ${azure.app.client.secret}
            provider: aad
            scope:
              - ${syfohelsenettproxy.scope}

          btsys-m2m:
            authorization-grant-type: client_credentials
            client-authentication-method: client_secret_basic
            client-id: ${azure.app.client.id}
            client-secret: ${azure.app.client.secret}
            provider: aad
            scope:
              - ${btsys.scope}
          pdlcache-m2m:
            authorization-grant-type: client_credentials
            client-authentication-method: client_secret_basic
            client-id: ${azure.app.client.id}
            client-secret: ${azure.app.client.secret}
            provider: aad
            scope:
              - ${tsmpdl.scope}
        provider:
          aad:
            issuer-uri: ${azure.openid.config.issuer}


    bootstrap-servers: localhost:9092

syfohelsenettproxy:
  base-url: ${SYFOHELSENETTPROXY_BASE_URL}
btsys:
  endpoint-url: ${BTSYS_ENDPOINT_URL}
pdlcache:
    endpoint-url: ${TSM_PDL_ENDPOINT_URL}
nais:
  token:
    endpoint: ${NAIS_TOKEN_ENDPOINT}
  cluster: ${NAIS_CLUSTER_NAME}
topics:
  write: "tsm.sykmeldinger-input"
  read: "tsm.sykmeldinger"